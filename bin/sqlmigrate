#!/usr/bin/env node
if (!process.env.DEBUG) process.env.DEBUG = 'sqlmigrate:*'

var Promise = require('bluebird')
var assert = require('assert')
var error = require('debug')('sqlmigrate:error')
var debug = require('debug')('sqlmigrate:debug')
var fs = require('fs')
var lib = require('../lib.js')
var path = require('path')

var ARGS = {
  'help': Boolean,
  'create': Boolean,
  'init': Boolean,
  '--help': Boolean,
  '--max': Number,
  '--any-order': Boolean,
  '--config': String,
  '--name': String
}

function parseArgs(args) {
  return args.reduce(function(obj, arg) {
    arg = arg.split('=')
    var key = arg[0]
    var value = arg[1]
    var Constructor = ARGS[key]
    assert.ok(Constructor, 'Unknown argument: ' + key)
    key = key
    .replace(/^--/, '')
    .replace(/-([a-z])/, function(_, value) {
      return value.toUpperCase()
    })
    obj[key] = Constructor === Boolean
    ? true
    : typeof value !== undefined ? Constructor(value) : undefined
    return obj
  }, {})
}

function getConfigFilePath(configFile) {
  configFile = configFile || '.sqlmigrate'
  if (!path.isAbsolute(configFile)) {
    configFile = path.join(process.cwd(), configFile)
  }
  return configFile
}

function createConfigFile(configFile) {
  configFile = getConfigFilePath(configFile)
  if (fs.existsSync(configFile)) {
    throw new Error('Aborting write, config file exists: ' + configFile)
  }
  debug('Writing config file to', configFile)
  fs.writeFileSync(
    configFile,
    JSON.stringify({
      migrationsDir: 'migrations',
      migrationTable: 'migrations',
      driver: 'mysql',
      dbConfig: {
        database: 'mydb',
        host: '127.0.0.1',
        port: 3306,
        user: 'test',
        password: 'test'
      }
    })
  )
}

function readConfigFile(configFile) {
  return require(getConfigFilePath(configFile))
}

function start(args) {
  var parsedArgs = parseArgs(args)

  if (parsedArgs.help) {
    console.error('Usage: sqlmigrate [command] [args...]')
    console.error('')
    console.error('Migration will be performed when no command is specified.')
    console.error('')
    console.error('The default command accepts the following optional args:')
    console.error('')
    console.error('  --config=file  config file to use, default is .sqlmigrate')
    console.error('  --max=n        max number of migrations to perform')
    console.error('  --any-order    do not fail if there are new migrations')
    console.error('                 created before the last executed migration')
    console.error('')
    console.error('Commands:')
    console.error('  create [--name=string]  creates a migration')
    console.error('  help                    prints this help')
    console.error('  init                    initialize config file')
    return 0
  }

  if (parsedArgs.init) {
    createConfigFile(parsedArgs.config)
    return 0
  }

  var config = readConfigFile(parsedArgs.config)
  var sqlmigrate = lib.create(config)

  if ('create' in parsedArgs) {
    sqlmigrate.createMigration(parsedArgs.name || 'new-migration')
    return 0
  }

  return sqlmigrate.migrate(parsedArgs.max, parsedArgs.anyOrder)
  .then(function() {
    return 0
  })
  .catch(function(err) {
    error('Migration error. ' + err.stack)
    return 1
  })
}

if (require && require.main === module) {
  var args = process.argv.slice(2)
  Promise.resolve(start(args))
  .then(process.exit)
}

module.exports = {
  parseArgs: parseArgs,
  start: start
}
